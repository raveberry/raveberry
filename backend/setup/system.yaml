- name: Check if any xsessions are present
  stat:
    path: /usr/share/xsessions
  register: xsessions

- name: Screen visualization
  when: config.screen_visualization
  block:
    - name: "Screen visualization: Force hdmi hotplug"
      when: pi
      lineinfile:
        path: /boot/config.txt
        line: "hdmi_force_hotplug=1"
    # without fkms or kms, rendering is not hardware accelerated
    # omxplayer is incompatible with kms -> we use fkms
    - name: "Screen visualization: Enable fkms"
      when: pi
      lineinfile:
        path: /boot/config.txt
        line: "dtoverlay=vc4-fkms-v3d"
    # without access to renderD128 (render) another slow method is used
    # in order to play video, www-data needs to be in the video group
    - name: "Screen visualization: Rendering privileges"
      user:
        name: www-data
        groups: render,video
        append: yes

    - name: "Screen visualization: Start X on boot"
      when: not xsessions.stat.exists
      block:
        - name: "Screen visualization: Start X on boot: xinit service"
          copy:
            src: files/xinit.service
            dest: /etc/systemd/system/xinit.service
        - name: "Screen visualization: Start X on boot: enable xinit"
          systemd:
            enabled: yes
            daemon_reload: yes
            name: xinit

    - name: "Screen visualization: X privileges"
      # only the user can extend privileges to other users
      when: xsessions.stat.exists
      become: false
      block:
        - name: "Screen visualization: X privileges: get home"
          shell: echo $HOME
          register: home

        - name: "Screen visualization: X privileges: xhost"
          # use host based access so we don't have to deal with .Xauthority cookies
          command: xhost +si:localuser:www-data
          environment:
            DISPLAY: :0

        - name: "Screen visualization: X privileges: .xsessionrc"
          lineinfile:
            path: "{{ home.stdout }}/.xsessionrc"
            line: "xhost +si:localuser:www-data"
            create: true

- name: LED visualization
  # Led visualization only works on Raspberry Pis
  when: config.led_visualization and pi
  block:
    - name: "LED visualization: i2c"
      lineinfile:
        path: /boot/config.txt
        line: "dtparam=i2c_arm=on"
    - name: "LED visualization: spi"
      lineinfile:
        path: /boot/config.txt
        line: "dtparam=spi=on"

    - name: "LED visualization: Core frequency"
      when: pi4
      block:
        - name: "LED visualization: Core frequency: core_freq"
          lineinfile:
            path: /boot/config.txt
            line: "core_freq=500"
        - name: "LED visualization: Core frequency: core_freq_min"
          lineinfile:
            path: /boot/config.txt
            line: "core_freq_min=500"

    - name: "LED visualization: Core frequency"
      when: not pi4
      lineinfile:
        path: /boot/config.txt
        line: "core_freq=250"

- name: pulseaudio
  block:
  - name: "pulseaudio: service"
    copy:
      src: files/pulseaudio.service
      dest: /etc/systemd/system/pulseaudio.service
  # https://wiki.archlinux.org/index.php/PulseAudio/Troubleshooting#Glitches.2C_skips_or_crackling
  - name: "pulseaudio: disable timer based scheduling"
    lineinfile:
      path: /etc/pulse/system.pa
      regexp: "^load-module module-udev-detect"
      line: "load-module module-udev-detect tsched=0"
  - name: "pulseaudio: config"
    blockinfile:
      path: /etc/pulse/system.pa
      block: |
        load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1
        load-module module-bluetooth-policy
        load-module module-bluetooth-discover
      marker: "# {mark} ANSIBLE MANAGED BLOCK modules"
  - name: "pulseaudio: Add virtual cava sink"
    when: config.led_visualization or config.screen_visualization
    blockinfile:
      path: /etc/pulse/system.pa
      block: |
        load-module module-null-sink sink_name=cava
        update-sink-proplist cava device.description="virtual sink for cava"
      marker: "# {mark} ANSIBLE MANAGED BLOCK virtual sink"
  - name: "pulseaudio: disable pipewire"
    become: false
    # ignore if the service does not exist on the system
    ignore_errors: true
    systemd:
      scope: "user"
      enabled: no
      state: "stopped"
      name: pipewire
  - name: "pulseaudio: disable wireplumber"
    become: false
    # ignore if the service does not exist on the system
    ignore_errors: true
    systemd:
      scope: "user"
      enabled: no
      state: "stopped"
      name: wireplumber
  - name: "pulseaudio: disable pipewire.socket"
    become: false
    # ignore if the service does not exist on the system
    ignore_errors: true
    systemd:
      scope: "user"
      enabled: no
      state: "stopped"
      name: pipewire.socket

- name: mopidy config skeleton
  copy:
    src: files/mopidy.conf
    dest: /etc/mopidy/mopidy.conf
# output is set in database.yaml

- name: Set max volume to 100%
  command: "{{ item }}"
  with_items:
    # Built in output of a Raspberry Pi
    - amixer -q -c 0 sset HDMI 100%
    # Built in output of a Raspberry Pi
    - amixer -q -c 0 sset Headphone 100%
    - amixer -q -c 1 sset Headphone 100%
    # output of an external sound card
    - amixer -q -c 1 sset Speaker 100%
    - amixer -q -c 2 sset Speaker 100%
  # if amixer is not installed the outputs have different names anyway
  # if the specified names are wrong, no harm is done as well
  failed_when: no

- name: Cache directory
  when: config.cache_dir
  block:
    - name: "Cache directory: Create cache directory"
      file:
        path: "{{ config.cache_dir }}"
        state: directory
        owner: www-data
        group: www-data
    - name: "Cache directory: Set cache directory path"
      copy:
        dest: "{{ config.install_directory }}/config/cache_dir"
        content: "{{ config.cache_dir }}"

- name: Cache medium
  when: config.cache_medium
  block:
    - name: "Cache medium: get www-data uid"
      user:
        name: www-data
      register: www_user
    - name: "Cache medium: get www-data gid"
      group:
        name: www-data
      register: www_group
    - name: "Cache medium: Automount cache medium"
      mount:
        path: "/mnt/{{ config.cache_medium }}"
        src: 'LABEL="{{ config.cache_medium }}"'
        fstype: ntfs
        opts: "auto,nofail,noatime,rw,dmask=002,fmask=0113,gid={{ www_group.gid }},uid={{ www_user.uid }}"
        state: mounted
    - name: "Cache medium: Create cache directory"
      file:
        path: "/mnt/{{ config.cache_medium }}/raveberry"
        state: directory
        owner: www-data
        group: www-data
    - name: "Cache medium: Set cache directory path"
      copy:
        dest: "{{ config.install_directory }}/config/cache_dir"
        content: "/mnt/{{ config.cache_medium }}/raveberry"

- name: Led permissions for www-data
  when: config.led_visualization
  user:
    name: www-data
    groups: spi,gpio,i2c
    append: yes
- name: Audio permissions for www-data
  user:
    name: www-data
    groups: audio,pulse,pulse-access
    append: yes
- name: Bluetooth permissions for www-data
  user:
    name: www-data
    groups: bluetooth
    append: yes
- name: Bluetooth permissions for pulse
  shell: adduser pulse bluetooth
  # for some reason this leads to "[Errno 28] No space left on device in /var/run/pulse/.cargo" on Github Actions
  #user:
  #  name: pulse
  #  groups: bluetooth
  #  append: yes
- name: Cache directory access permissions for mopidy
  user:
    name: mopidy
    groups: www-data
    append: yes

- name: www-data home permissions
  file:
    path: /var/www
    state: directory
    recurse: yes
    owner: www-data
    group: www-data
- name: www-data raveberry directory permissions
  file:
    path: "{{ config.install_directory }}"
    state: directory
    recurse: yes
    # a local library link - if given - should not be recursively updated
    follow: no
    owner: www-data
    group: www-data

- name: Allow www-data passwordless sudo to system scripts
  lineinfile:
    dest: /etc/sudoers
    line: "www-data ALL=NOPASSWD:/usr/local/sbin/raveberry/*"
    validate: visudo -cf %s

- name: Enable and restart pulseaudio
  systemd:
    state: restarted
    enabled: yes
    daemon_reload: yes
    name: pulseaudio

- name: Periodic backup script
  when: config.backup_command
  cron:
    name: "Raveberry backup"
    hour: "5"
    minute: "0"
    user: root
    job: "{{ config.backup_command }}"

- name: Periodic yt-dlp updates
  when: config.youtube is not defined or config.youtube
  cron:
    name: "update yt-dlp"
    hour: "5"
    minute: "30"
    user: root
    job: "/usr/bin/pip3 install -U yt-dlp"

- name: Periodic metadata sync
  when: config.youtube is not defined or config.youtube
  cron:
    name: "sync song metadata"
    hour: "6"
    minute: "0"
    user: www-data
    job: "{{ config.install_directory }}/.venv/bin/python3 {{ config.install_directory }}/manage.py syncsongmetadata"

