name: Publish Raveberry
on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - run: pip install -r backend/requirements/frontend_build.txt
      - run: yarn --cwd frontend install
      - run: yarn --cwd frontend build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-files
          path: |
            backend/static/bundle.js
            backend/static/style.css
            backend/static/*.woff2
  test-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - uses: actions/download-artifact@v4
        with:
          name: frontend-files
          path: backend/static/
      - run: pip install -r backend/requirements/frontend_test.txt
      - run: yarn --cwd frontend install
      - run: yarn --cwd frontend test
  test-backend:
    runs-on: ubuntu-latest
    services:
      # from https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
      postgres:
        image: postgres
        env:
          POSTGRES_DB: raveberry
          POSTGRES_USER: raveberry
          POSTGRES_PASSWORD: raveberry
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      # from https://docs.github.com/en/actions/using-containerized-services/creating-redis-service-containers
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      # in order to use the raveberry/raveberry-mopidy container,
      # we would need to share the songs cache. Instead, run mopidy on the host.
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install pip dependencies
        run: pip install -r backend/requirements/backend_test.txt
      - run: sudo apt-get update
      - run: sudo apt-get -y install ffmpeg mopidy gstreamer1.0-plugins-bad
      - name: Start mopidy
        run: |
          mopidy -o "audio/output=fakesink sync=true" &
          # wait for mopidy so it can handle connections
          sleep 5
      - name: Prepare database
        run: |
          python backend/manage.py migrate
      - run: python backend/manage.py test
  test-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install pip dependencies
        run: pip install -r backend/requirements/install.txt
      - run: sudo apt-get update
      - name: remove pyyaml
        run: |
          sudo rm -rf /usr/lib/python3/dist-packages/yaml
          sudo rm -rf /usr/lib/python3/dist-packages/PyYAML-*
      # https://stackoverflow.com/questions/73830524/attributeerror-module-lib-has-no-attribute-x509-v-flag-cb-issuer-check
      - name: Fix preinstalled apt dependencies
        run: |
          sudo apt-get --reinstall install python3-apt
          sudo apt-get --reinstall install apt-transport-https
          sudo apt-get install build-essential libssl-dev libffi-dev
      - name: Fix preinstalled pip dependencies
        run: sudo pip install pyopenssl --upgrade
      - run: sudo systemctl start postgresql
      - run: bin/raveberry --confirm-config --use-default-password-i-promise-ill-change-it install
      - name: Check if server is up
        run: |
          counter=0
          until [[ $(curl -sS http://localhost/api/version/) == "Raveberry version"* ]] || [ $counter -gt 30 ]
          do
            counter=$((counter + 1))
            sleep 1
          done
          # exit with failure if curl did not succeed in any iteration
          [ $counter != 31 ]
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      # use output instead of conclusion because there are issues if the step does not succeed
      docker-status: ${{ steps.comparison.outputs.docker-status }}
      pypi-status: ${{ steps.comparison.outputs.pypi-status }}
    steps:
      - uses: actions/checkout@v4
      # https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions#setting-an-environment-variable
      - run: echo "GITHUB_VERSION=$(cat backend/VERSION | tr -d '[:space:]')" >> $GITHUB_ENV
      - run: echo "PYPI_VERSION=$(curl -Ls https://pypi.org/pypi/raveberry/json | jq -r .info.version | tr -d '[:space:]')" >> $GITHUB_ENV
      - run: echo "DOCKER_VERSION=$(docker pull raveberry/raveberry >/dev/null && docker run raveberry/raveberry /bin/cat /opt/raveberry/VERSION | tr -d '[:space:]')" >> $GITHUB_ENV
      - name: Compare versions
        id: comparison
        run: |
          if [ "$DOCKER_VERSION" != "$GITHUB_VERSION" ]; then echo "::set-output name=docker-status::update"; fi
          if [ "$PYPI_VERSION" != "$GITHUB_VERSION" ]; then echo "::set-output name=pypi-status::update"; fi
  pypi-publish:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-install, check-versions]
    if: needs.check-versions.outputs.pypi-status == 'update'
    # from https://packaging.python.org/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: frontend-files
          path: backend/static/
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install pypa/build
        run: pip install build --user
      - name: Rename module folder
        run: ln -s backend raveberry
      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
  docker-publish:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-install, check-versions]
    if: needs.check-versions.outputs.docker-status == 'update'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: frontend-files
          path: backend/static/
      - run: echo "VERSION=$(cat backend/VERSION | tr -d '[:space:]')" >> $GITHUB_ENV
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - uses: docker/login-action@v1
        with:
          username: raveberry
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - run: pip install "django==4.*"
      - name: Copy static admin files
        run: cp -r "$(python -c 'import django, os; print(f"{os.path.dirname(django.__file__)}/contrib/admin/static/admin")')" backend/static/admin
      - run: "docker buildx build --platform linux/amd64,linux/arm/v7 --output type=registry -f docker/Dockerfile -t raveberry/raveberry:$VERSION -t raveberry/raveberry ."
      - run: "docker buildx build --platform linux/amd64,linux/arm/v7 --output type=registry -f docker/nginx.Dockerfile -t raveberry/raveberry-nginx:$VERSION -t raveberry/raveberry-nginx ."
